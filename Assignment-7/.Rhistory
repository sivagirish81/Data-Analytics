library("recommenderlab")
install.packages("recommenderlab")
library("recommenderlab")
data("MovieLense")
View(MovieLenseMeta)
View(MovieLenseMeta)
MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
MovieLense100
train <- MovieLense100[1:50]
rec <- Recommender(train, method = "UBCF")
rec
pre <- predict(rec, MovieLense100[101:102], n = 10)
pre
View(pre)
as(pre, "list")
accuracy(rec)
#accuracy(rec)
summary(rec)
calcPredictionAccuracy(rec,MovieLense100)
calcPredictionAccuracy(rec,MovieLense100,byUser=TRUE)
library("recommenderlab")
library("recommenderlab")
data("MovieLense")
MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
MovieLense100
library("recommenderlab")
data("MovieLense")
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#pre
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#pre
#as(pre, "list")
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#pre
#as(pre, "list")
#accuracy(rec)
#MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#pre
#as(pre, "list")
#accuracy(rec)
#summary(rec)
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#pre
#as(pre, "list")
#accuracy(rec)
#summary(rec)
#calcPredictionAccuracy(rec,MovieLense100,byUser=TRUE)
class(MovieLense)
methods(class=class(MovieLense))
object.size(MovieLense)
similarity_users_cosine <- similarity(MovieLense[1:4,],method = "cosine" ,which = "users")
similarity_users_jaccard <- similarity(MovieLense[1:4,],method = "jaccard" ,which = "users")
class(similarity_users_cosine)
class(similarity_users_jaccard)
as.matrix(similarity_users_cosine)
as.matrix(similarity_users_jaccard)
image(as.matrix(similarity_users_cosine), main = "Similarity Between Users(cosine)")
image(as.matrix(similarity_users_jaccard), main = "Similarity Between Users(jaccard)")
View(MovieLense)
View(MovieLense)
View(MovieLense)
View(MovieLenseMeta)
View(MovieLense)
View(MovieLense)
View(MovieLenseMeta)
view(MovieLense)
str(MovieLense)
str(MovieLenseMeta)
str(similarity_users_cosine)
similarity_users_cosine <- similarity(MovieLense[1:4,],method = "cosine" ,which = "users")
as.matrix(similarity_users_cosine)
#Recomendation Models
recommender_models <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
names(recommender_models)
vector_ratings <- as.vector(MovieLense@data)
unique(vector_ratings)
table_ratings <- table(vector_ratings)
table_ratings
#Remove all 0 ratings
vector_ratings <- vector_ratings[vector_ratings != 0]
vector_ratings <- factor(vector_ratings)
qplot(vector_ratings) + ggtitle("Distribution of the ratings")
library("ggplot2")
qplot(vector_ratings) + ggtitle("Distribution of the ratings")
views_per_movie <- colCounts(MovieLense)
views_per_movie
table_views <- data.frame(movie = names(views_per_movie),views = views_per_movie)
table_views <- table_views[order(table_views$views, decreasing =TRUE), ]
+ theme(axis.text.x =element_text(angle = 45, hjust = 1)) + ggtitle("Number of views of the top movies")
ggplot(table_views[1:6, ], aes(x = movie, y = views)) +geom_bar(stat="identity") + theme(axis.text.x =element_text(angle = 45, hjust = 1)) + ggtitle("Number of views of the top movies")
source('D:/College/PES/Semester-5/Data Analytics/Data-Analytics/Assignment-7/Recommend.r')
library("recommenderlab")
library("ggplot2")
data("MovieLense")
#MovieLense100
#train <- MovieLense100[1:50]
#rec <- Recommender(train, method = "UBCF")
#rec
#pre <- predict(rec, MovieLense100[101:102], n = 10)
#pre
#as(pre, "list")
#accuracy(rec)
#summary(rec)
#calcPredictionAccuracy(rec,MovieLense100,byUser=TRUE)
class(MovieLense)
methods(class=class(MovieLense))
object.size(MovieLense)
similarity_users_cosine <- similarity(MovieLense[1:4,],method = "cosine" ,which = "users")
similarity_users_jaccard <- similarity(MovieLense[1:4,],method = "jaccard" ,which = "users")
class(similarity_users_cosine)
class(similarity_users_jaccard)
as.matrix(similarity_users_cosine)
as.matrix(similarity_users_jaccard)
image(as.matrix(similarity_users_cosine), main = "Similarity Between Users(cosine)")
image(as.matrix(similarity_users_jaccard), main = "Similarity Between Users(jaccard)")
str(MovieLense)
str(MovieLenseMeta)
str(similarity_users_cosine)
#Recomendation Models
recommender_models <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
names(recommender_models)
vector_ratings <- as.vector(MovieLense@data)
unique(vector_ratings)
table_ratings <- table(vector_ratings)
table_ratings
#Remove all 0 ratings
vector_ratings <- vector_ratings[vector_ratings != 0]
vector_ratings <- factor(vector_ratings)
#Most of the ratings are above 2, and the most common is 4.
qplot(vector_ratings) + ggtitle("Distribution of the ratings")
views_per_movie <- colCounts(MovieLense)
views_per_movie
table_views <- data.frame(movie = names(views_per_movie),views = views_per_movie)
table_views <- table_views[order(table_views$views, decreasing =TRUE), ]
ggplot(table_views[1:6, ], aes(x = movie, y = views)) +geom_bar(stat="identity") + theme(axis.text.x =element_text(angle = 45, hjust = 1)) + ggtitle("Number of views of the top movies")
average_ratings <- colMeans(MovieLense)
qplot(average_ratings) + stat_bin(binwidth = 0.1) +ggtitle("Distribution of the average movie rating")
average_ratings_relevant <- average_ratings[views_per_movie > 100]
qplot(average_ratings_relevant) + stat_bin(binwidth = 0.1) +ggtitle(paste("Distribution of the relevant average ratings"))
library("recommenderlab")
library("ggplot2")
data("MovieLense")
class(MovieLense)
methods(class=class(MovieLense))
object.size(MovieLense)
similarity_users_cosine <- similarity(MovieLense[1:4,],method = "cosine" ,which = "users")
similarity_users_jaccard <- similarity(MovieLense[1:4,],method = "jaccard" ,which = "users")
class(similarity_users_cosine)
class(similarity_users_jaccard)
as.matrix(similarity_users_cosine)
as.matrix(similarity_users_jaccard)
image(as.matrix(similarity_users_cosine), main = "Similarity Between Users(cosine)")
image(as.matrix(similarity_users_jaccard), main = "Similarity Between Users(jaccard)")
str(MovieLense)
str(MovieLenseMeta)
str(similarity_users_cosine)
#Recomendation Models
recommender_models <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
names(recommender_models)
vector_ratings <- as.vector(MovieLense@data)
unique(vector_ratings)
table_ratings <- table(vector_ratings)
table_ratings
#Remove all 0 ratings
vector_ratings <- vector_ratings[vector_ratings != 0]
vector_ratings <- factor(vector_ratings)
#Most of the ratings are above 2, and the most common is 4.
qplot(vector_ratings) + ggtitle("Distribution of the ratings")
views_per_movie <- colCounts(MovieLense)
views_per_movie
table_views <- data.frame(movie = names(views_per_movie),views = views_per_movie)
table_views <- table_views[order(table_views$views, decreasing =TRUE), ]
ggplot(table_views[1:6, ], aes(x = movie, y = views)) +geom_bar(stat="identity") + theme(axis.text.x =element_text(angle = 45, hjust = 1)) + ggtitle("Number of views of the top movies")
average_ratings <- colMeans(MovieLense)
qplot(average_ratings) + stat_bin(binwidth = 0.1) +ggtitle("Distribution of the average movie rating")
average_ratings_relevant <- average_ratings[views_per_movie > 100]
qplot(average_ratings_relevant) + stat_bin(binwidth = 0.1) +ggtitle(paste("Distribution of the relevant average ratings"))
ratings_movies_norm <- normalize(ratings_movies)
ratings_movies <- MovieLense[rowCounts(MovieLense) > 50,colCounts(MovieLense) > 100] ratings_movies
ratings_movies <- MovieLense[rowCounts(MovieLense) > 50 and colCounts(MovieLense) > 100] ratings_movies
ratings_movies <- MovieLense[rowCounts(MovieLense) > 50,colCounts(MovieLense) > 100]
ratings_movies
ratings_movies_norm <- normalize(ratings_movies)
min_movies <- quantile(rowCounts(ratings_movies), 0.98)
min_users <- quantile(colCounts(ratings_movies), 0.98)
image(ratings_movies[rowCounts(ratings_movies) > min_movies,colCounts(ratings_movies) > min_users], main = "Heatmap of the top users and movies")
image(ratings_movies_norm[rowCounts(ratings_movies_norm) > min_movies,colCounts(ratings_movies_norm) > min_users], main = "Heatmap of the top users and movies")
#Binarize the data
ratings_movies_watched <- binarize(ratings_movies, minRating = 1)
min_movies_binary <- quantile(rowCounts(ratings_movies), 0.95)
min_users_binary <- quantile(colCounts(ratings_movies), 0.95)
image(ratings_movies_watched[rowCounts(ratings_movies) > min_movies_binary,colCounts(ratings_movies) > min_users_binary], main = "Heatmap of the top users and movies")
ratings_movies_good <- binarize(ratings_movies, minRating = 3)
#User Based Collabrative Filtering
recommender_models <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
recommender_models$UBCF_realRatingMatrix$parameters
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
#Split into train and test
which_train <- sample(x = c(TRUE, FALSE), size = nrow(ratings_movies),replace = TRUE, prob = c(0.8, 0.2))
head(which_train)
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
#Split into train and test
which_train <- sample(x = c(TRUE, FALSE), size = nrow(ratings_movies),replace = TRUE, prob = c(0.8, 0.2))
head(which_train)
recc_data_train <- ratings_movies[which_train, ]
recc_data_test <- ratings_movies[!which_train, ]
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
recc_model
model_details <- getModel(recc_model)
names(model_details)
model_details$data
n_recommended <- 6
recc_predicted <- predict(object = recc_model,newdata = recc_data_test, n = n_recommended)
recc_predicted <- predict(object = recc_model,newdata = recc_data_test, n = n_recommended)
recc_matrix <- sapply(recc_predicted@items, function(x){
colnames(ratings_movies)[x]
})
dim(recc_matrix)
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for UBCF"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top), number_of_items_top)
table_top
ratings <- factor(vector_ratings)
#Most of the ratings are above 2, and the most common is 4.
qplot(ratings) + ggtitle("Ratings Distribution")
library("recommenderlab")
library("ggplot2")
data("MovieLense")
class(MovieLense)
methods(class=class(MovieLense))
object.size(MovieLense)
similarity_users_cosine <- similarity(MovieLense[1:4,],method = "cosine" ,which = "users")
similarity_users_jaccard <- similarity(MovieLense[1:4,],method = "jaccard" ,which = "users")
class(similarity_users_cosine)
class(similarity_users_jaccard)
as.matrix(similarity_users_cosine)
as.matrix(similarity_users_jaccard)
image(as.matrix(similarity_users_cosine), main = "Similarity Between Users(cosine)")
image(as.matrix(similarity_users_jaccard), main = "Similarity Between Users(jaccard)")
str(MovieLense)
str(MovieLenseMeta)
str(similarity_users_cosine)
#Recomendation Models
recommender_models <- recommenderRegistry$get_entries(dataType ="realRatingMatrix")
names(recommender_models)
vector_ratings <- as.vector(MovieLense@data)
unique(vector_ratings)
#No. of movies that are rated 0,1,2,3,4 or 5
table_ratings <- table(vector_ratings)
table_ratings
ratings <- as.vector(MovieLense@data)
#No. of movies that are rated 0,1,2,3,4 or 5
table_ratings <- table(ratings)
table_ratings
#Remove all 0 ratings
vector_ratings <- vector_ratings[vector_ratings != 0]
ratings <- factor(vector_ratings)
#Most of the ratings are above 2, and the most common is 4.
qplot(ratings) + ggtitle("Ratings Distribution")
recc_model <- Recommender(data = recc_data_train, method = "UBCF")
recc_model
model_details <- getModel(recc_model)
names(model_details)
model_details$data
n_recommended <- 6
recc_predicted <- predict(object = recc_model,newdata = recc_data_test, n = n_recommended)
recc_matrix <- sapply(recc_predicted@items, function(x){
colnames(ratings_movies)[x]
})
dim(recc_matrix)
recc_matrix[, 1:4]
number_of_items <- factor(table(recc_matrix))
chart_title <- "Distribution of the number of items for UBCF"
qplot(number_of_items) + ggtitle(chart_title)
chart_title <- "UBCF item distribution"
qplot(number_of_items) + ggtitle(chart_title)
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top), number_of_items_top)
table_top
